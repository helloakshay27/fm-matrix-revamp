import { useEffect, useState } from "react";
import { Button } from "@/components/ui/button";
import { Plus, Edit, Eye } from "lucide-react";
import { useNavigate } from "react-router-dom";
import { WOFilterDialog } from "@/components/WOFilterDialog";
import { ColumnConfig } from "@/hooks/useEnhancedTable"; // Adjust the import path as needed
import { EnhancedTable } from "@/components/enhanced-table/EnhancedTable";
import { toast } from "sonner";
import { useAppDispatch } from "@/store/hooks";
import { fetchWorkOrders } from "@/store/slices/workOrderSlice";

export const WODashboard = () => {
  const navigate = useNavigate();
  const dispatch = useAppDispatch();

  const token = localStorage.getItem("token");
  const baseUrl = localStorage.getItem("baseUrl");

  const [searchQuery, setSearchQuery] = useState("");
  const [isFilterDialogOpen, setIsFilterDialogOpen] = useState(false);
  const [workOrders, setWorkOrders] = useState([])

  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await dispatch(fetchWorkOrders({ baseUrl, token })).unwrap();
        setWorkOrders(response)
      } catch (error) {
        console.log(error);
        toast.error(error)
      }
    }

    fetchData();
  }, [])

  const getStatusColor = (status: string) => {
    switch (status?.toLowerCase()) {
      case "approved":
        return "bg-green-500 text-white";
      case "rejected":
        return "bg-red-500 text-white";
      case "pending":
        return "bg-yellow-500 text-black";
      default:
        return "bg-gray-500 text-white";
    }
  };

  const renderCell = (item: any, columnKey: string) => {
    switch (columnKey) {
      case "approvalStatus":
        return (
          <span
            className={`px-2 py-1 rounded text-xs font-medium ${getStatusColor(
              item?.approvalStatus
            )}`}
          >
            {item?.approvalStatus}
          </span>
        );
      case "referenceNo":
        return (
          <span className="text-blue-600 hover:underline cursor-pointer">
            {item.referenceNo}
          </span>
        );
      case "activeInactive":
        return (
          <input
            type="checkbox"
            checked={item.activeInactive}
            readOnly
            className="w-4 h-4"
          />
        );
      default:
        return item[columnKey] || "";
    }
  };

  const columns: ColumnConfig[] = [
    { key: "id", label: "ID", sortable: true, draggable: true, defaultVisible: true },
    { key: "woNo", label: "WO No.", sortable: true, draggable: true, defaultVisible: true },
    {
      key: "referenceNo",
      label: "Reference No.",
      sortable: true,
      draggable: true,
      defaultVisible: true,
    },
    { key: "createdBy", label: "Created by", sortable: true, draggable: true, defaultVisible: true },
    { key: "supplier", label: "Supplier", sortable: true, draggable: true, defaultVisible: true },
    {
      key: "approvalStatus",
      label: "Approval Status",
      sortable: true,
      draggable: true,
      defaultVisible: true,
    },
    {
      key: "paymentTenureInDays",
      label: "Payment Tenure (in Days)",
      sortable: true,
      draggable: true,
      defaultVisible: true,
    },
    { key: "advanceAmount", label: "Advance Amount", sortable: true, draggable: true, defaultVisible: true }, // Corrected label
    { key: "totalAmtCritNAmount", label: "Total Amount", sortable: true, draggable: true, defaultVisible: true },
    { key: "woAmount", label: "WO Amount", sortable: true, draggable: true, defaultVisible: true },
    { key: "totalAmtCritNAmount", label: "Total Amt Crit N Amount", sortable: true, draggable: true, defaultVisible: true },
    { key: "generatedBy", label: "Generated By", sortable: true, draggable: true, defaultVisible: true },
    { key: "retentionPercent", label: "Retention (%)", sortable: true, draggable: true, defaultVisible: true },
    {
      key: "retentionOutstanding",
      label: "Retention Outstanding",
      sortable: true,
      draggable: true,
      defaultVisible: true,
    },
    { key: "qcAmount", label: "QC Amount", sortable: true, draggable: true, defaultVisible: true },
    { key: "noOfItems", label: "No of Items", sortable: true, draggable: true, defaultVisible: true },
    { key: "totalAmountPaid", label: "Total Amount Paid", sortable: true, draggable: true, defaultVisible: true },
    { key: "outstanding", label: "Outstanding", sortable: true, draggable: true, defaultVisible: true },
    {
      key: "debtCollectionNoteRaised",
      label: "Debt Collection Note Raised",
      sortable: true,
      draggable: true,
      defaultVisible: true,
    },
    { key: "createdBy2", label: "Created by", sortable: true, draggable: true, defaultVisible: true }, // Second "Created by"
    { key: "uploadedBy", label: "Uploaded by", sortable: true, draggable: true, defaultVisible: true },
    { key: "updatedOn", label: "Updated On", sortable: true, draggable: true, defaultVisible: true },
    { key: "activeInactive", label: "Active/Inactive", sortable: false, draggable: true, defaultVisible: true }, // Added
    { key: "lastApprovedBy", label: "Last Approved By", sortable: true, draggable: true, defaultVisible: true }, // Added
  ];

  const renderActions = (item: any) => (
    <div className="flex items-center gap-3">
      <Button
        size="sm"
        variant="ghost"
        className="p-1"
        onClick={() => navigate(`/finance/wo/details/${item.id}`)}
      >
        <Eye className="w-4 h-4" />
      </Button>
      <Button
        size="sm"
        variant="ghost"
        className="p-1"
        onClick={(e) => {
          e.stopPropagation();
          navigate(`/finance/wo/edit/${item.id}`);
        }}
      >
        <Edit className="w-4 h-4" />
      </Button>
    </div>
  );

  return (
    <div className="p-4 sm:p-6">
      {/* Enhanced Table */}
      <EnhancedTable
        data={workOrders || []}
        columns={columns}
        renderCell={renderCell}
        renderActions={renderActions}
        storageKey="wo-dashboard-columns"
        className="min-w-[1200px]"
        emptyMessage="No work orders found"
        searchTerm={searchQuery}
        onSearchChange={setSearchQuery}
        searchPlaceholder="Search WOs..."
        // enableExport={true}
        exportFileName="work-orders"
        pagination={true}
        pageSize={10}
        enableSearch={true}
        onFilterClick={() => setIsFilterDialogOpen(true)}
      />

      {/* Filter Dialog */}
      <WOFilterDialog
        open={isFilterDialogOpen}
        onOpenChange={setIsFilterDialogOpen}
      />
    </div>
  );
};